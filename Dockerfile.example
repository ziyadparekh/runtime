# FROM directive is probably the most crucial amongst all others for Dockerfiles.
# It defines the base image to use to start the build process. It can be any image,
# including the ones you have created previously. If a FROM image is not found on
# the host, docker will try to find it (and download) from the docker image index.
# It needs to be the first command declared inside a Dockerfile.
#
# Usage: FROM [image name]
FROM


# One of the commands that can be set anywhere in the file - although it would be
# better if it was declared on top - is MAINTAINER. This non-executing command
# declares the author, hence setting the author field of the images. It should
# come nonetheless after FROM.
#
# Usage: MAINTAINER [name]
MAINTAINER

# The RUN command is the central executing directive for Dockerfiles.
# It takes a command as its argument and runs it to form the image.
# Unlike CMD, it actually is used to build the image (forming another
# layer on top of the previous one which is committed).
#
# Usage: RUN [command]
RUN

# The command CMD, similarly to RUN, can be used for executing a specific
# command. However, unlike RUN it is not executed during build, but when a
# container is instantiated using the image being built. Therefore, it
# should be considered as an initial, default command that gets executed
# (i.e. run) with the creation of containers based on the image.
#
# Usage 1: CMD application "argument", "argument", ..
CMD

# The EXPOSE command is used to associate a specified port to enable networking
# between the running process inside the container and the outside world (i.e. the host).
#
# Usage: EXPOSE [port]
EXPOSE

# The ENV command is used to set the environment variables (one or more).
# These variables consist of “key = value” pairs which can be accessed within
# the container by scripts and applications alike. This functionality of docker
# offers an enormous amount of flexibility for running programs.
#
# Usage: ENV key value
ENV


# The ADD command gets two arguments: a source and a destination.
# It basically copies the files from the source on the host into the
# container's own filesystem at the set destination. If, however, the source
# is a URL (e.g. http://github.com/user/file/), then the contents of the URL
# are downloaded and placed at the destination.
#
# Usage: ADD [source directory or URL] [destination directory]
ADD

# ENTRYPOINT argument sets the concrete default application that is used
# every time a container is created using the image. For example, if you
# have installed a specific application inside an image and you will use
# this image to only run that application, you can state it with ENTRYPOINT
# and whenever a container is created from that image, your application will
# be the target.
# If you couple ENTRYPOINT with CMD, you can remove "application" from CMD
# and just leave "arguments" which will be passed to the ENTRYPOINT.
#
# Usage: ENTRYPOINT application "argument", "argument", ..
# Remember: arguments are optional. They can be provided by CMD
#           or during the creation of a container.
ENTRYPOINT


# The VOLUME command is used to enable access from your container to a directory
# on the host machine (i.e. mounting it).
#
# Usage: VOLUME ["/dir_1", "/dir_2" ..]
VOLUME

# The USER directive is used to set the UID (or username) which is to # run the
# container based on the image being built.
#
# Usage: USER [UID]
USER

# The WORKDIR directive is used to set where the command defined with CMD
# is to be executed.
#
# Usage: WORKDIR /path
WORKDIR

